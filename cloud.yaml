AWSTemplateFormatVersion: 2010-09-09
Description: AWS Certbot - Request & Renew Certs in ACM for CloudFront/S3 hosting

Parameters:
  BucketName:
    Description: S3 Bucket (Certbot configuration tree and lambda source package)
    Type: String

  ObjectVersion:
    Description: Generated object version
    Type: String

  DomainList:
    Description: list of managed domains in csv format (cert request and renewal process)
    Type: String
    Default: "commit-composer.dev,www.commit-composer.dev,staging.commit-composer.dev"

  DomainEmail:
    Description: email address used in cert request
    Type: String
    Default: "jeffreyko@gmail.com"

  CertRenewDays:
    Description: number of days before cert expiration to request renew
    Type: String
    Default: "30"

  CertbotEnvironment:
    Description: set Certbot environment
    Type: String
    Default: "staging"
    AllowedValues:
      - "staging"
      - "production"

Resources:
  AwsCertbotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Allow-logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: arn:aws:logs:*:*:*
        - PolicyName: BucketGetPutObject
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  Fn::Join: ["", ["arn:aws:s3:::", Ref: "BucketName", "/*"]]
        - PolicyName: ACMGetImportCerts
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "acm:DescribeCertificate"
                  - "acm:ListCertificates"
                  - "acm:ImportCertificate"
                Resource: "*"

  AwsCertbotFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Description: Request and Renew Certs in ACM for CloudFront-S3 hosting
      Handler: main.handler
      Role:
        Fn::GetAtt: ["AwsCertbotRole", "Arn"]
      Environment:
        Variables:
          CERTBOT_BUCKET:
            Ref: BucketName
          CERTBOT_OBJECT: "certbot_backup.zip"
          DOMAINS_EMAIL:
            Ref: DomainEmail
          DOMAINS_LIST:
            Ref: DomainList
          CERTS_RENEW_DAYS_BEFORE_EXPIRATION:
            Ref: CertRenewDays
          CERTBOT_ENV:
            Ref: CertbotEnvironment
      Timeout: 60
      MemorySize: 512
      Code:
        S3Bucket:
          Ref: BucketName
        S3Key:
          Fn::Sub: "certbot-${ObjectVersion}.zip"

  # CertbotFunctionEvent:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: "Invoke CertbotFunction"
  #     ScheduleExpression: "rate(1 day)"
  #     State: "ENABLED"
  #     Targets:
  #       - Arn:
  #           Fn::GetAtt:
  #             - "CertbotFunction"
  #             - "Arn"
  #         Id: "TargetCertbotFunction"

  # CertbotFunctionEventPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName:
  #       Ref: "CertbotFunction"
  #     Action: "lambda:InvokeFunction"
  #     Principal: "events.amazonaws.com"
  #     SourceArn:
  #       Fn::GetAtt:
  #         - "CertbotFunctionEvent"
  #         - "Arn"
